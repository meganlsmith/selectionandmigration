// set up the first simulation
// this is a pulse of migration from population 1 into population 2 
// there is background selection
// neutral mutations are added after the fact via tree sequence recording


initialize() {
	// initialize tree sequence recording
	initializeTreeSeq();
	
	// this mutation rate should be proportional to the number of deleterious mutations.
	// so, if the overall mutation rate is 1e-8, and 75% of mutations are deleterious.
	// we would initialize this mutatation rate to .75 * 1e-8 = 7.5e-9
	// the neutral mutation rate would be .25 * 1e-8 = 2.5e-9
	initializeMutationRate(mutrate);
	
	// m1 mutation type: deleterious
	initializeMutationType("m1", 0.25, "g", sel, 0.35);
	
	// g1 genomic element type: uses m1 for all mutations
	initializeGenomicElementType("g1", m1, 1.0);
	
	// uniform chromosome of length 10 kb with uniform recombination
	initializeGenomicElement(g1, 0, 9999);
	initializeRecombinationRate(recrate);
}

// create a population of npop individuals
1 early() {
	sim.addSubpop("p1", npop);
	
        community.rescheduleScriptBlock(s1, burnin, burnin);
	community.rescheduleScriptBlock(s2, asInteger(divtime) - asInteger(tmig)+burnin, asInteger(divtime) - asInteger(tmig)+burnin);
	community.rescheduleScriptBlock(s3, asInteger(divtime) - asInteger(tmig)+burnin+1, asInteger(divtime) - asInteger(tmig)+burnin+1);
	community.rescheduleScriptBlock(s4, asInteger(divtime)+burnin, asInteger(divtime)+burnin);
}

// split the two populations
s1 1250 early() { 
	sim.addSubpopSplit("p2", npop, p1); 
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);
}

// migration pulse
s2 12625 early() {
	p2.setMigrationRates(p1, pmig);
}

s3 12626 early() {
	p2.setMigrationRates(p1, 0);
}


s4 13750 late() {
	cat("Final random seed: " + getSeed() + "\n");
	name = "p1_p2_bgs_scaled_"+rep+".trees";
	sim.treeSeqOutput(name);
}

