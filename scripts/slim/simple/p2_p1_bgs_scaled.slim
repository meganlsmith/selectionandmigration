// set up the first simulation
// this is a pulse of migration from population 2 into population 1 
// there is background selection
// neutral mutations are added after the fact via tree sequence recording


initialize() {
	// initialize tree sequence recording
	initializeTreeSeq();
	defineConstant("burnin", 25000);
	
	// this mutation rate should be proportional to the number of deleterious mutations.
	// so, if the overall mutation rate is 1e-8, and 75% of mutations are deleterious.
	// we would initialize this mutatation rate to .75 * 1e-8 = 7.5e-9
	// the neutral mutation rate would be .25 * 1e-8 = 2.5e-9
	initializeMutationRate(7.5e-7);
	
	// m1 mutation type: deleterious
	initializeMutationType("m1", 0.25, "g", -0.0133, 0.35);
	
	// g1 genomic element type: uses m1 for all mutations
	initializeGenomicElementType("g1", m1, 1.0);
	
	// uniform chromosome of length 10 kb with uniform recombination
	initializeGenomicElement(g1, 0, 9999);
	initializeRecombinationRate(5e-6);
}

// create a population of 125000 individuals
1 {
	sim.addSubpop("p1", 1250);
	sim.rescheduleScriptBlock(s1, asInteger(divtime) - asInteger(tmig)+burnin-1, asInteger(divtime) - asInteger(tmig)+burnin-1);
	sim.rescheduleScriptBlock(s2, asInteger(divtime) - asInteger(tmig)+burnin, asInteger(divtime) - asInteger(tmig)+burnin);
	sim.rescheduleScriptBlock(s3, asInteger(divtime)+burnin, asInteger(divtime)+burnin);
	sim.rescheduleScriptBlock(s4, burnin, burnin);
}

// split the two populations
s4 12500 { 
	sim.addSubpopSplit("p2", 1250, p1); 
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);
}

// migration pulse
s1 12625 {
	p1.setMigrationRates(p2, pmig);
}

s2 12626 {
	p1.setMigrationRates(p2, 0);
}


s3 13750 late() {
	cat("Final random seed: " + getSeed() + "\n");
	name = "p2_p1_bgs_scaled_"+rep+".trees";
	sim.treeSeqOutput(name);
}

